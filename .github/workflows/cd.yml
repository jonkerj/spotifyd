name: Continuous Deployment

on:
  push:
    tags:
    - 'v*.*.*'

jobs:
  publish:
    name: Publishing ${{ matrix.build_target }}-${{ matrix.artifact_type }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        build_target: [linux-aarch64]
        rust: [stable]
        artifact_type: ['slim']         # The build strategy will build both types for each OS specified
        include:
          - artifact_type: 'slim'               # Slim version has no features enabled by default.
            feature: ''
          - build_target: linux-aarch64
            os: ubuntu-18.04
            artifact_prefix: linux-aarch64
            audio_backend: alsa
            target: aarch64-unknown-linux-gnu

    steps:
      - name: Debug-dump env
        uses: managedkaos/print-env@master
      - name: Installing Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.rust }}
          target: ${{ matrix.target }}
          override: true
      - name: Installing needed Ubuntu dependencies
        if: matrix.os == 'ubuntu-latest' || matrix.os == 'ubuntu-18.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y -qq libasound2-dev libssl-dev libpulse-dev libdbus-1-dev
      - name: Installing needed Ubuntu aarch64 dependencies
        if: matrix.os == 'ubuntu-18.04' && matrix.build_target == 'linux-aarch64'
        run: |
          sudo mkdir -p /build/sysroot
          echo "deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports/ bionic main" | sudo tee -a /etc/apt/sources.list
          sudo apt-get update
          sudo apt-get install -y -qq gcc-aarch64-linux-gnu libc6-arm64-cross libc6-dev-arm64-cross
          sudo apt-get download libasound2:arm64 libasound2-dev:arm64 libssl-dev:arm64 libssl1.1:arm64
          sudo dpkg -x libasound2_*.deb /build/sysroot/
          sudo dpkg -x libssl-dev*.deb /build/sysroot/
          sudo dpkg -x libssl1.1*.deb /build/sysroot/
          sudo dpkg -x libasound2-dev*.deb /build/sysroot/
          echo "::set-env name=PKG_CONFIG_ALLOW_CROSS::1"
          echo "::set-env name=RUSTFLAGS::-C linker=aarch64-linux-gnu-gcc -L/usr/aarch64-linux-gnu/lib/ -L/build/sysroot/usr/lib/aarch64-linux-gnu/ -L/build/sysroot/lib/aarch64-linux-gnu/"
          echo "::set-env name=C_INCLUDE_PATH::/build/sysroot/usr/include"
          echo "::set-env name=OPENSSL_LIB_DIR::/build/sysroot/usr/lib/aarch64-linux-gnu"
          echo "::set-env name=OPENSSL_INCLUDE_DIR::/build/sysroot/usr/include/aarch64-linux-gnu"
      - name: Checking out sources
        uses: actions/checkout@v1
      - name: Running cargo build
        uses: actions-rs/cargo@v1
        with:
          command: build
          toolchain: ${{ matrix.rust }}
          args: --locked --release --target ${{ matrix.target }} --no-default-features --features "${{ matrix.feature }},${{ matrix.audio_backend }}_backend"
      - name: Packaging final binary
        shell: bash
        run: |
          cd target/${{ matrix.target }}/release
          tar czvf spotifyd-${{ matrix.artifact_prefix }}-${{ matrix.artifact_type }}.tar.gz spotifyd
          shasum -a 512 spotifyd-${{ matrix.artifact_prefix }}-${{ matrix.artifact_type }}.tar.gz > spotifyd-${{ matrix.artifact_prefix }}-${{ matrix.artifact_type }}.sha512
      - name: Releasing assets
        uses: softprops/action-gh-release@v1
        with:
          files: |
            target/${{ matrix.target }}/release/spotifyd-${{ matrix.artifact_prefix }}-${{ matrix.artifact_type }}.tar.gz
            target/${{ matrix.target }}/release/spotifyd-${{ matrix.artifact_prefix }}-${{ matrix.artifact_type }}.sha512
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
